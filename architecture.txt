DB design =>

table user - enrollment ID (primary key), name, age, email, phone number, address, pincode, batch, next_batch
table enrollment - phone number (primary key), enrollment ID (foreign key)
table payments - enrollment ID (foreign key), pay_due, starting_date


cron job at EOD => check if a month has elapsed from the starting_date, if it has:
                        - update the starting_date
                        - make pay_due as true
                        - update batch to be the next_batch

Optional => when checking for EOD at every day, if the term is nearing an end and pay_due is true
            we can send a SMS to the user regarding the payment



Pages for frontend =>

1. Landing page for filling the form
2. Congratulations on the successful enrollment page with the display of the enrollment ID (email receipt with the enrollment number and due date would be sent)
3. Make the payment page with the demo CompletePayment() function for completing the payment and displaying the same on completion
4. Change the batch page on the basis of enrollment ID
5. Leave the yoga classes on the basis of enrollment ID
6. Forgot your enrollment ID page, searched through your phone number


Routes for backend =>

1. /new - for filling up the form and submitting the data
2. /pay - for payment of the dues
3. /change - for changing the batch of a customer
4. /leave - for deleting the customer record
5. /forgot - for getting the enrollment number on the basis of your phone number
6. /getb - getting the current batch of a user

2e55b5ba4a5cadc915faade9ec30e751cc71340bfdd68f72273969b75b20fa6e